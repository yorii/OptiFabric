buildscript {
	repositories {
		jcenter()
		maven {
			name = 'Fabric'
			url = 'https://maven.fabricmc.net/'
		}
		maven { 
			name = "Jitpack"
			url 'https://jitpack.io/'
		}
	}
	dependencies {
		classpath 'com.github.Chocohead.Fabric-Loom:fabric-loom:c290f8f'
	}
}

apply plugin: net.fabricmc.loom.LoomGradlePlugin
apply plugin: 'maven-publish'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	mavenCentral()
	jcenter()
	maven {
		name "Modmuss50 Repository"
		url 'https://maven.fabricmc.net/'
	}
	maven { url "https://dl.bintray.com/shedaniel/shedaniel-mods" }
	maven {
		name = "Clothesline"
		url 'https://maven.jamieswhiteshirt.com/libs-release/'
	}
	maven { url 'https://maven.blamejared.com' }
	maven { url 'https://dl.bintray.com/earthcomputer/mods' }
	maven { url 'http://modmaven.k-4u.nl/artifactory/local-releases/' }
	maven { url 'https://mod-buildcraft.com/maven' }
	maven { url 'https://maven.dblsaiko.net' }
	maven { url 'https://dl.bintray.com/adriantodt/maven' }
	maven { url 'https://www.cursemaven.com' }
	maven { url 'https://jitpack.io' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"
	include "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"

	modRuntime("me.shedaniel:RoughlyEnoughItems:5.4.2") {
		exclude(group: "net.fabricmc")
		exclude(group: "net.fabricmc.fabric-api")
	}
	modRuntime("RebornCore:RebornCore-1.16:4.4.1+build.69") {
		exclude(group: "net.fabricmc")
		exclude(group: "net.fabricmc.fabric-api")
	}
	modRuntime("TechReborn:TechReborn-1.16:3.5.3+build.115") {
		exclude(group: "net.fabricmc")
		exclude(group: "net.fabricmc.fabric-api")
		exclude(group: "RebornCore") //TR depends purely on the newest version
	}
	modRuntime("com.jamieswhiteshirt:clothesline-fabric:0.2.1+1.16.2") {
		exclude(group: "net.fabricmc")
		exclude(group: "net.fabricmc.fabric-api")
	}
	modRuntime "curse.maven:trumpet-skeleton-fabric:3033242"
	modRuntime ("vazkii.patchouli:Patchouli:1.16-40-FABRIC") {
		exclude(group: "net.fabricmc")
		exclude(group: "net.fabricmc.fabric-api")
	}
	modRuntime "curse.maven:malilib:3030379"
	modRuntime "curse.maven:watson:3054484"
	modRuntime 'net.earthcomputer:multiconnect:1.3.19:api'
	modRuntime 'net.earthcomputer:multiconnect:1.3.19:slim'
	modRuntime 'curse.maven:now-playing:3041887'
	modRuntime ('com.github.apace100:origins-fabric:0.4.1') {
		exclude(group: "net.fabricmc")
		exclude(group: "net.fabricmc.fabric-api")
	}
	modRuntime 'curse.maven:staff-of-building:3033652'
	modRuntime ('me.shedaniel.cloth.api:cloth-dynamic-registry-api-v1:1.2.1') {
		exclude(group: "net.fabricmc")
		exclude(group: "net.fabricmc.fabric-api")
	}
	modRuntime 'curse.maven:sandwichable:3039866'
	modRuntime ('appeng:appliedenergistics2-fabric:8.1.0-alpha.9') {
		exclude(group: "net.fabricmc")
		exclude(group: "net.fabricmc.fabric-api")
	}
	modRuntime ('net.fabricmc:fabric-language-kotlin:1.4.0+build.1') {
		exclude(group: "net.fabricmc")
	}
	modRuntime ('net.dblsaiko:hctm-base:3.3.0') {
		exclude(group: "net.fabricmc")
		exclude(group: "net.fabricmc.fabric-api")
	}
	modRuntime ('com.github.DawnTeamMC:DawnAPI:1.4.1') {
		exclude(group: "net.fabricmc")
		exclude(group: "net.fabricmc.fabric-api")
	}
	modRuntime ('com.github.DawnTeamMC:Mubble:0ccbea2') {
		exclude(group: "net.fabricmc")
		exclude(group: "net.fabricmc.fabric-api")
	}
	modRuntime ('com.github.user11681:smartentrypoints:2ae077c') {
		exclude(group: "net.fabricmc")
		exclude(group: "net.fabricmc.fabric-api")
	}
	modRuntime ('com.github.user11681:phormat:77f017e') {
		exclude(group: "net.fabricmc")
		exclude(group: "net.fabricmc.fabric-api")
	}
	modRuntime 'curse.maven:chat-heads:3057632'
}

compileJava {
	mappings {
		from = 'named'
		to = 'intermediary'
		method 'net/optifine/reflect/ReflectorForge', '(Lnet/minecraft/item/ItemStack;)Z', 'isItemDamaged', 'isItemDamaged'
		method 'net/minecraft/client/particle/ParticleManager', '(Lnet/minecraft/client/util/math/MatrixStack;Lnet/minecraft/client/render/VertexConsumerProvider$Immediate;' +
		'Lnet/minecraft/client/render/LightmapTextureManager;Lnet/minecraft/client/render/Camera;FLnet/minecraft/client/render/Frustum;)V', 'renderParticles', 'renderParticles'
		method 'net/minecraft/client/render/block/BlockModelRenderer', '(Lnet/minecraft/world/BlockRenderView;Lnet/minecraft/client/render/model/BakedModel;' + 
		'Lnet/minecraft/block/BlockState;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/client/util/math/MatrixStack;Lnet/minecraft/client/render/VertexConsumer;Z' + 
		'Ljava/util/Random;JILnet/minecraftforge/client/model/data/IModelData;)Z', 'renderModel', 'renderModel'
	}
}

task unzip(type: Copy) {
	def zipFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
	def outputDir = file("${buildDir}/unpacked/dist")

	if(outputDir.exists()){
		outputDir.deleteDir()
	}

	from zipTree(zipFile)
	into outputDir
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}